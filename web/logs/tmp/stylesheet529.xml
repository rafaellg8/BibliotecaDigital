<?xml version="1.0" encoding="UTF-8"?><xslt:stylesheet xmlns:xslt="http://www.w3.org/1999/XSL/Transform" xmlns:gs3="http://www.greenstone.org/gs3" xmlns:gsf="http://www.greenstone.org/greenstone3/schema/ConfigFormat" xmlns:gslib="http://www.greenstone.org/skinning" xmlns:gsvar="http://www.greenstone.org/skinning-var" xmlns:java="http://xml.apache.org/xslt/java" xmlns:util="xalan://org.greenstone.gsdl3.util.XSLTUtil" xmlns:xalan="http://xml.apache.org/xalan" xmlns:xlink="http://www.w3.org/1999/xlink" exclude-result-prefixes="util xalan gslib gsf xslt" extension-element-prefixes="java util" version="1.0">

    

	
	

	
	<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pageTitle">PLUCO - Biblioteca Digital</xsl:template>
    
	
	<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="breadcrumbs"/>

	
	<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="/page/pageResponse">

		<div id="quickSearch">
			<xsl:call-template name="crossCollectionQuickSearchForm"/>
		</div>
        
        <h2>
<xsl:call-template name="selectACollectionTextBar"/>
</h2>

		<div id="collectionLinks">
			<xsl:if test="count(collectionList/collection) = 0">
				<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'home.no_collections')"/>
				<br/>
			</xsl:if>
			<xsl:for-each select="collectionList/collection">
				<xsl:call-template name="pluco"/>
			</xsl:for-each>
			<br class="clear"/>
		</div>

	        <div style="clear: both; padding-top: 4px; padding-bottom: 4px;">
<hr/>
</div>

		<xsl:call-template name="serviceClusterList"/>

		<xsl:for-each select="serviceList/service[@type='query']">
			<xsl:call-template name="serviceLink"/>
<br/>
		</xsl:for-each>
		
		<xsl:for-each select="serviceList/service[@type='authen']">
			<xsl:call-template name="authenticationLink"/>
<br/>
<br/>
			<xsl:call-template name="registerLink"/>
<br/>
		</xsl:for-each>

	</xsl:template>




  
  

  <xsl:output xmlns:xsl="http://www.w3.org/1999/XSL/Transform" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd" method="html"/>
	
  
  <xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="interface_name"/>
  <xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="library_name"/>
  <xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="site_name"/>
  

  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="siteName">
    <xsl:value-of select="/page/pageResponse/metadataList/metadata[@name='siteName']"/>
  </xsl:template>

  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="siteLink">
    <a href="./{$library_name}">
      <xsl:call-template name="siteName"/>
    </a>
	<xsl:text> </xsl:text>
  </xsl:template>
  
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="a">
    <xsl:value-of select="/page/pageRequest/paramList/param[@name='a']/@value"/>
  </xsl:variable>
  
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collections" select="/page/pageResponse/collectionList/collection"/>
  
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="berrybasketswitch">
    <xsl:value-of select="/page/pageRequest/paramList/param[@name='berrybasket']/@value"/>
  </xsl:variable>
  
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="berryBasketOn" select="/page/pageRequest/paramList/param[@name='berrybasket' and @value='on']"/>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="documentBasketOn" select="/page/pageRequest/paramList/param[@name='documentbasket' and @value='on']"/>
  
	<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="thisCollectionEditor">
		<xsl:value-of select="/page/pageRequest/paramList/param[@name = 'c']/@value"/>
		<xsl:text>-collection-editor</xsl:text>
	</xsl:variable>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collectionName">
    <xsl:choose>
      <xsl:when test="/page/pageResponse/collection">
        <xsl:value-of select="/page/pageResponse/collection/displayItem[@name='name']"/>
      </xsl:when>
      <xsl:otherwise>All Collections</xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collectionNameShort">
    <xsl:value-of select="/page/pageResponse/collection/@name"/>
  </xsl:template>
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collectionNameLinked">
    <xsl:if test="/page/pageResponse/collection">
      <a>
        <xsl:attribute name="href">./<xsl:value-of select="$library_name"/>/collection/<xsl:call-template name="collectionNameShort"/>/page/about</xsl:attribute>
        <xsl:call-template name="collectionName"/>
      </a>
    </xsl:if>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="serviceName">
    <xsl:value-of select="/page/pageResponse/service/displayItem[@name='name']"/>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="textDirectionAttribute">
    <xsl:attribute name="dir">
      <xsl:choose>
        <xsl:when test="/page/@lang='ar' or /page/@lang='fa' or /page/@lang='he' or /page/@lang='ur' or /page/@lang='ps' or /page/@lang='prs'">rtl</xsl:when>
        <xsl:otherwise>ltr</xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="actionClass">
    <xsl:attribute name="class">
<xsl:value-of select="/page/pageRequest/@action"/>Action <xsl:if test="/page/pageRequest/@subaction">
<xsl:value-of select="/page/pageRequest/@subaction"/>Subaction</xsl:if>
</xsl:attribute>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="defaultDividerBar">
    <xsl:param name="text"/>
    <xsl:choose>
      <xsl:when test="$text">
        <div class="divbar">
          <xsl:value-of select="$text"/>
        </div>
      </xsl:when>
      <xsl:otherwise>
        <div class="divbar">
          <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
        </div>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="error">
    <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'error')"/> <xsl:value-of select="."/>
  </xsl:template>
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="displayErrorsIfAny">
    <xsl:if test="descendant::error">
      <script language="Javascript">
        <xsl:text disable-output-escaping="yes">
	  function removeAllChildren(node) {
	    while (node.hasChildNodes()) {
	      node.removeChild(node.firstChild);
	    }
	  }

	  function toggleHideError(obj) {
	    if (obj.style.display == "none") {
	      obj.style.display = "";
	      hide_link = document.getElementById("hide");
	      removeAllChildren(hide_link);
	      hide_link.appendChild(document.createTextNode("</xsl:text>
        <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'hide_error')"/>
        <xsl:text disable-output-escaping="yes">"));
	    } else {
	      obj.style.display = "none";
	      hide_link = document.getElementById("hide");
	      removeAllChildren(hide_link);
	      hide_link.appendChild(document.createTextNode("</xsl:text>
        <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'show_error')"/>
        <xsl:text disable-output-escaping="yes">"));
	    }
	  }
	</xsl:text>
      </script>
      <p align="right">
        <a href="javascript:toggleHideError(error);" id="hide">
          <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'show_error')"/>
        </a>
      </p>
      <div id="error" style="display: none;">
        <xsl:apply-templates select="descendant::error"/>
      </div>
    </xsl:if>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="noTextBar">
    <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="poweredByGS3TextBar">
    <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'gs3power')"/>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rightArrow">
    <xsl:text disable-output-escaping="yes"> &amp;raquo; </xsl:text>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="siteHomePageTitle">
    
    <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'gsdl')"/>
    <xsl:text> </xsl:text>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="selectACollectionTextBar">
    <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'home.select_a_collection')"/>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="crossCollectionQuickSearchForm">
    <xsl:apply-templates select="serviceList/service[@name='TextQuery']"/>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="service[@name='TextQuery']">
    <form action="{$library_name}" method="get" name="QuickSearch">
      <input name="a" type="hidden" value="q"/>
      <input name="rt" type="hidden" value="rd"/>
      <input name="s" type="hidden" value="{@name}"/>
      <input name="s1.collection" type="hidden" value="all"/>
      <input name="s1.query" size="20" type="text"/>
      <input type="submit">
        <xsl:attribute name="value">
          <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'home.quick_search')"/>
        </xsl:attribute>
      </input>
    </form>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collectionLinkWithImage">
    <xsl:variable name="desc">
<xsl:value-of select="displayItem[@name='shortDescription']"/>
</xsl:variable>
    <xsl:variable name="coll_href">
<xsl:value-of select="$library_name"/>/collection/<xsl:value-of select="@name"/>/page/about<xsl:choose>
<xsl:when test="libraryParamList/param">?<xsl:for-each select="libraryParamList/param">
<xsl:value-of select="@name"/>=<xsl:value-of select="@default"/>&amp;</xsl:for-each>
</xsl:when>
</xsl:choose>
</xsl:variable>
    <xsl:choose>
      <xsl:when test="displayItem[@name='icon']">
        <a href="{$coll_href}" title="{$desc}">
          <img class="collectionLinkImage">
            <xsl:attribute name="alt">
<xsl:value-of select="displayItem[@name='name']"/>
</xsl:attribute>
            <xsl:attribute name="src">sites/<xsl:value-of select="$site_name"/>/collect/<xsl:value-of select="@name"/>/images/<xsl:value-of select="displayItem[@name='icon']"/>
</xsl:attribute>
          </img>
        </a>
      </xsl:when>
      <xsl:otherwise>
        <a href="{$coll_href}" title="{$desc}">
          <div class="collectionLink ui-corner-all">
			<div class="collectionLinkText ui-widget-content ui-corner-top">
				<xsl:value-of select="displayItem[@name='name']"/>
			</div>
			<div class="ui-state-default ui-corner-bottom" style="height:15px;">
<xsl:text> </xsl:text>
</div>
          </div>
        </a>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="serviceClusterList">
    <xsl:apply-templates select="serviceClusterList"/>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="serviceClusterList">
    <xsl:for-each select="serviceCluster">
      <a href="{$library_name}?a=p&amp;sa=about&amp;c={@name}">
        <xsl:value-of select="@name"/>
        <xsl:value-of select="displayItem[@name='name']"/>
      </a>
    </xsl:for-each>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="serviceLink">
    <div class="paramLabel">
      <a href="{$library_name}?a=q&amp;rt=d&amp;s={@name}">
        <xsl:value-of select="displayItem[@name='name']"/>
      </a>
    </div>
    <div class="paramValue">
      <xsl:value-of select="displayItem[@name='description']"/>
    </div>
    <br class="clear"/>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="authenticationLink">
    <xsl:for-each select="//serviceList/service[@type='authen']">
		<div class="paramLabel">
			<a href="{$library_name}/admin/ListUsers">
				<xsl:value-of select="displayItem[@name='name']"/>
			</a>
		</div>
		<div class="paramValue">
			<xsl:value-of select="displayItem[@name='description']"/>
		</div>
    </xsl:for-each>
  </xsl:template>

  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="registerLink">
    <xsl:for-each select="//serviceList/service[@type='authen']">
		<div class="paramLabel">
			<a href="{$library_name}/admin/Register">
				<xsl:text>Register</xsl:text>
			</a>
		</div>
		<div class="paramValue">
			<xsl:text>Register as a new user</xsl:text>
		</div>
    </xsl:for-each>
  </xsl:template>

  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="libraryInterfaceLink">
    <li>
      <a href="{$library_name}?a=p&amp;sa=gli4gs3">
        <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'home.librarian_interface')"/>
      </a>
    </li>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="greenstoneLogoAlternateText">
    <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'gsdl')"/>
  </xsl:template>
  
  
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collName" select="/page/pageRequest/paramList/param[@name='c']/@value"/>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="httpPath" select="/page/pageResponse/collection/metadataList/metadata[@name='httpPath']"/>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="siteName" select="$site_name"/>
  <xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collName" select="/page/pageRequest/paramList/param[@name='c']/@value"/>
  <xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pageType"/>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="this-element" select="/page/pageResponse/collection|/page/pageResponse/serviceCluster"/>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="this-service" select="/page/pageRequest/paramList/param[@name = 's']/@value"/>




  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="define-js-variable">
    <xsl:param name="name"/>
    <xsl:param name="value"/>
    <script type="text/javascript">
      gs.variables[<xslt:text disable-output-escaping="yes">"</xslt:text>
<xsl:value-of select="$name"/>
<xslt:text disable-output-escaping="yes">"</xslt:text>]
      <xslt:text disable-output-escaping="yes"> = "</xslt:text>
      <xsl:value-of select="$value"/>
      <xslt:text disable-output-escaping="yes">";</xslt:text>
    </script>
  </xsl:template>

  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="_httpcollection_" select="$httpPath"/>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="_httpbrowse_">
<xsl:value-of select="$library_name"/>/collection/<xsl:value-of select="$collName"/>/browse</xsl:variable>
  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="_httpquery_">
<xsl:value-of select="$library_name"/>/collection/<xsl:value-of select="$collName"/>/search</xsl:variable>

  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="define-js-macro-variables">

    <xsl:call-template name="define-js-variable">
      <xsl:with-param name="name" select="'_httpbrowse_'"/>
      <xsl:with-param name="value" select="$_httpbrowse_"/>
    </xsl:call-template>

    <xsl:call-template name="define-js-variable">
      <xsl:with-param name="name" select="'_httpquery_'"/>
      <xsl:with-param name="value" select="$_httpquery_"/>
    </xsl:call-template>

  </xsl:template>


  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="aboutCollectionPageTitle">
    
    <xsl:value-of select="/page/pageResponse/collection/displayItem[@name='name']"/>
    <xsl:text> </xsl:text>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collectionHomeLinkWithLogoIfAvailable">
    <a href="{$library_name}?a=p&amp;sa=about&amp;c={$collName}">
      <xsl:choose>
        <xsl:when test="$this-element/displayItem[@name='icon']">
          <img border="0">
            <xsl:attribute name="src">
<xsl:value-of select="$this-element/metadataList/metadata[@name='httpPath']"/>/images/<xsl:value-of select="$this-element/displayItem[@name='icon']"/>
</xsl:attribute>
            <xsl:attribute name="alt">
              <xsl:value-of select="$this-element/displayItem[@name='name']"/>
            </xsl:attribute>
            <xsl:attribute name="title">
              <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'aboutpage')"/>
            </xsl:attribute>
          </img>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$this-element/displayItem[@name='name']"/>
        </xsl:otherwise>
      </xsl:choose>
    </a>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="homeButtonTop">
    <a href="{$library_name}?a=p&amp;sa=home">
      <xsl:attribute name="title">
        <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'home_tip')"/>
      </xsl:attribute>
      <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'home_b')"/>
    </a>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="helpButtonTop">
    <xsl:choose>
      <xsl:when test="$pageType='help'">
        <li>
          <a>
            <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'help_b')"/>
          </a>
        </li>
      </xsl:when>
      <xsl:otherwise>
        <li>
          <a href="{$library_name}?a=p&amp;sa=help&amp;c={$collName}">
            <xsl:attribute name="title">
              <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'help_tip')"/>
            </xsl:attribute>
            <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'help_b')"/>
          </a>
        </li>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="preferencesButtonTop">
    <xsl:choose>
      <xsl:when test="$pageType='pref'">
        <li>
          <a>
            <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'pref_b')"/>
          </a>
        </li>
      </xsl:when>
      <xsl:otherwise>
        <li>
          <a href="{$library_name}?a=p&amp;sa=pref&amp;c={$collName}">
            <xsl:attribute name="title">
              <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'pref_tip')"/>
            </xsl:attribute>
            <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'pref_b')"/>
          </a>
        </li>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="servicesNavigationBar">
    <xsl:for-each select="$this-element/serviceList/service">
      <xsl:variable name="action">
        <xsl:choose>
          <xsl:when test="@name=$this-service">CURRENT</xsl:when>
          <xsl:when test="@type='query'">q</xsl:when>
          <xsl:when test="@type='browse'">b</xsl:when>
          <xsl:when test="@type='process'">pr</xsl:when>
          <xsl:when test="@type='applet'">a</xsl:when>
          <xsl:otherwise>DO_NOT_DISPLAY</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$action='CURRENT'">
          <li>
            <a>
              <xsl:value-of select="displayItem[@name='name']"/>
            </a>
          </li>
        </xsl:when>
        <xsl:when test="$action !='DO_NOT_DISPLAY'">
          <li>
            <a href="{$library_name}?a={$action}&amp;rt=d&amp;s={@name}&amp;c={$collName}">
              <xsl:if test="displayItem[@name='description']">
                <xsl:attribute name="title">
                  <xsl:value-of select="displayItem[@name='description']"/>
                </xsl:attribute>
              </xsl:if>
              <xsl:value-of select="displayItem[@name='name']"/>
            </a>
          </li>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collectionDescriptionTextAndServicesLinks">
    <xsl:apply-templates select="pageResponse/collection|serviceCluster"/>
  </xsl:template>
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="collection|serviceCluster">
    <xsl:value-of disable-output-escaping="yes" select="displayItem[@name='description']"/>

	
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="serviceList">	
	<xsl:param name="collName"/>
		<h3>
		  <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'about.services')"/>
		</h3>
		<p>
		  <xsl:choose>
			<xsl:when test="service">
			  <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'about.servicehelp')"/>
			</xsl:when>
			<xsl:otherwise>
			  <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'about.noservices')"/>
			</xsl:otherwise>
		  </xsl:choose>
		</p>
		<xsl:if test="service">
		  <div id="servicelist">
			<xsl:for-each select="service">
			  <xsl:sort data-type="number" order="descending" select="position()"/>
			  <xsl:variable name="action">
				<xsl:choose>
				  <xsl:when test="@type='query'">q</xsl:when>
				  <xsl:when test="@type='process'">pr</xsl:when>
				  <xsl:when test="@type='applet'">a</xsl:when>
				  <xsl:otherwise>DO_NOT_DISPLAY</xsl:otherwise>
				</xsl:choose>
			  </xsl:variable>
			  <xsl:if test="$action != 'DO_NOT_DISPLAY'">
				<div class="paramLabel">
				  <a href="{$library_name}?a={$action}&amp;rt=d&amp;s={@name}&amp;c={$collName}">
					<xsl:value-of select="displayItem[@name='name']"/>
				  </a>
				</div>
				<div class="paramLabel">
				  <xsl:value-of select="displayItem[@name='description']"/>
				</div>
				<br class="clear"/>
			  </xsl:if>
			</xsl:for-each>
		  </div>
		</xsl:if>

  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collapsedNavigationTab">
    <xsl:param name="type"/>
    <xsl:variable name="isCurrent" select="/page/pageResponse/service[@type=$type]"/>
    <li>
      <xsl:if test="$isCurrent">
        <xsl:attribute name="class">current</xsl:attribute>
      </xsl:if>
      <a>
        <xsl:if test="service[@name=$type]/displayItem[@name='description']">
          <xsl:attribute name="title">
            <xsl:value-of select="service[@name=$type]/displayItem[@name='description']"/>
          </xsl:attribute>
        </xsl:if>
        <xsl:attribute name="href">
<xsl:value-of select="$library_name"/>?a=q&amp;rt=d&amp;s=<xsl:value-of select="service[@type=$type]/@name"/>&amp;c=<xsl:value-of select="/page/pageResponse/collection/@name"/>
</xsl:attribute>
        <xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, $type)"/>
      </a>
    </li>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="navigationTab">
    <xsl:variable name="isCurrent" select="@name=/page/pageResponse/service/@name"/>
    <xsl:variable name="action">
      <xsl:choose>
        <xsl:when test="@type='query'">q</xsl:when>
        <xsl:when test="@type='browse'">b</xsl:when>
        <xsl:when test="@type='process'">pr</xsl:when>
        <xsl:when test="@type='applet'">a</xsl:when>
        <xsl:otherwise>DO_NOT_DISPLAY</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:if test="$action!='DO_NOT_DISPLAY'">
      <li>
        <xsl:if test="$isCurrent">
          <xsl:attribute name="class">current</xsl:attribute>
        </xsl:if>
        <a>
          <xsl:if test="displayItem[@name='description']">
            <xsl:attribute name="title">
              <xsl:value-of select="displayItem[@name='description']"/>
            </xsl:attribute>
          </xsl:if>
          <xsl:choose>
            <xsl:when test="classifierList/classifier/@name">
              <xsl:attribute name="href">
<xsl:value-of select="$library_name"/>?a=<xsl:value-of select="$action"/>&amp;rt=s&amp;s=<xsl:value-of select="@name"/>&amp;c=<xsl:value-of select="/page/pageResponse/collection/@name"/>&amp;cl=<xsl:value-of select="classifierList/classifier/@name"/>
</xsl:attribute>
            </xsl:when>
            <xsl:otherwise>
              <xsl:attribute name="href">
<xsl:value-of select="$library_name"/>?a=<xsl:value-of select="$action"/>&amp;rt=d&amp;s=<xsl:value-of select="@name"/>&amp;c=<xsl:value-of select="/page/pageResponse/collection/@name"/>
</xsl:attribute>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:value-of select="displayItem[@name='name']"/>
        </a>
      </li>
    </xsl:if>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="classifierLink">
    <xsl:if test="@name=/page/pageResponse/classifier/@name">
      <xsl:attribute name="class">current</xsl:attribute>
    </xsl:if>
    <a href="{$library_name}?a=b&amp;rt=r&amp;s={/page/pageResponse/service/@name}&amp;c={/page/pageResponse/collection/@name}&amp;cl={@name}">
      <xsl:value-of select="displayItem[@name='description']"/>
    </a>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="indexName">
    <xsl:value-of select="/page/pageResponse/service/displayItem[@name='name']"/>
  </xsl:template>
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="queryPageCollectionName">
    <xsl:choose>
      <xsl:when test="/page/pageResponse/collection">
        <xsl:call-template name="aboutCollectionPageTitle"/>
      </xsl:when>
      <xsl:otherwise>Cross-Collection</xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="berryBasket">
    <xsl:if test="$berryBasketOn">
      <div class="hide" id="berrybasket">
        <span>Berry Basket</span>
        <span id="berryBasketExpandCollapseLinks" style="display: none;">
          <a href="javascript:showBasket()" id="berryBasketExpandLink">Expand</a>
          <a href="javascript:hideBasket()" id="berryBasketCollapseLink" style="display: none;">Collapse</a>
        </span>
        <div id="baskethandle">
          <span>
            <xsl:text> </xsl:text>
          </span>
        </div>
        <div id="berries">
          <span>
            <xsl:text> </xsl:text>
          </span>
        </div>
      </div>
    </xsl:if>
  </xsl:template>
  
	
	<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="documentBasket">
		<xsl:if test="$documentBasketOn and /page/pageRequest/userInformation and /page/pageRequest/userInformation/@editEnabled = 'true' and (util:contains(/page/pageRequest/userInformation/@groups, 'administrator') or util:contains(/page/pageRequest/userInformation/@groups, 'all-collections-editor') or util:contains(/page/pageRequest/userInformation/@groups, $thisCollectionEditor))">
			<div class="hide" id="documentbasket">
				<span>Document Basket</span>
				<span id="documentBasketExpandCollapseLinks" style="display: none;">
					<a href="javascript:showDocumentBox()" id="documentBasketExpandLink">Expand</a>
					<a href="javascript:hideDocumentBox()" id="documentBasketCollapseLink" style="display: none;">Collapse</a>
				</span>
				<div id="documenthandle">
					<span>
						<xsl:text> </xsl:text>
					</span>
				</div>
				<div id="documentpages">
					<span>
						<xsl:text> </xsl:text>
					</span>
				</div>
				<div>
					<a href="javascript:clearBasket();">Clear basket</a>
				</div>
			</div>
		</xsl:if>
	</xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="berryBasketHeadTags">
    <script src="interfaces/{$interface_name}/js/yui/yahoo-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <script src="interfaces/{$interface_name}/js/yui/event-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <script src="interfaces/{$interface_name}/js/yui/connection-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <script src="interfaces/{$interface_name}/js/yui/dom-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <script src="interfaces/{$interface_name}/js/yui/dragdrop-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/yui/cookie-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/yui/animation-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	
	<script src="interfaces/{$interface_name}/js/berrybasket/ygDDPlayer.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <script src="interfaces/{$interface_name}/js/berrybasket/ygDDOnTop.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <script src="interfaces/{$interface_name}/js/berrybasket/berrybasket.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
    <link href="interfaces/{$interface_name}/style/berry.css" rel="stylesheet" type="text/css"/>
	
	 
	<link href="interfaces/{$interface_name}/style/skin.css" rel="stylesheet" type="text/css"/>

	<script src="interfaces/{$interface_name}/js/documentbasket/documentbasket.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/documentbasket/documentBasketDragDrop.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	 
	<script src="interfaces/{$interface_name}/js/documentbasket/yahoo-dom-event.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/documentbasket/container_core-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/documentbasket/element-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/documentbasket/menu-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/documentbasket/button-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	<script src="interfaces/{$interface_name}/js/documentbasket/editor-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script> 
	<script src="interfaces/{$interface_name}/js/documentbasket/yuiloader-min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	
	
    <link href="interfaces/{$interface_name}/style/documentbasket.css" rel="stylesheet" type="text/css"/>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="documentBerryForClassifierOrSearchPage">
    <xsl:if test="$berryBasketOn">
      <img alt="in basket" border="0" class="pick" height="15" src="interfaces/{$interface_name}/images/berry.png" width="15">
        <xsl:attribute name="id">
<xsl:value-of select="/page/pageResponse/collection/@name"/>:<xsl:value-of select="@nodeID"/>
</xsl:attribute>
      </img>
    </xsl:if>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="documentBerryForDocumentPage">
    <xsl:variable name="selectedNode">
      <xsl:value-of select="/page/pageResponse/document/@selectedNode"/>
    </xsl:variable>
    <xsl:variable name="rootNode">
      <xsl:value-of select="/page/pageResponse/document/documentNode[@nodeType='root']/@nodeID"/>
    </xsl:variable>
    <xsl:if test="$berryBasketOn">
      <div id="documentberries">
        <img alt="in basket" border="0" class="pick" height="15" id="{/page/pageResponse/collection/@name}:{$rootNode}" src="interfaces/{$interface_name}/images/berry.png" width="15"/>
        <span class="documentberry" id="{/page/pageResponse/collection/@name}:{$rootNode}:root">the whole document</span>
        
      </div>
    </xsl:if>
  </xsl:template>
  
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="documentTitle">
    <xsl:value-of select="/page/pageResponse/document/documentNode/metadataList/metadata[@name='Title']"/>
  </xsl:template>
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="coverImage">
    <img>
      <xsl:attribute name="src">
<xsl:value-of select="/page/pageResponse/collection/metadataList/metadata[@name='httpPath']"/>/index/assoc/<xsl:value-of select="metadataList/metadata[@name='assocfilepath']"/>/cover.jpg</xsl:attribute>
    </img>
  </xsl:template>
  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="previousNextButtons">
    
    <a>
      <xsl:attribute name="href">
<xsl:value-of select="$library_name"/>?a=d&amp;c=<xsl:value-of select="/page/pageResponse/collection/@name"/>&amp;d=<xsl:value-of select="@selectedNode"/>.pp&amp;sib=1&amp;p.s=<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.s']/@value"/>&amp;p.sa=<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.sa']/@value"/>&amp;p.a=<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.a']/@value"/>
</xsl:attribute>
      <img class="lessarrow" src="interfaces/{$interface_name}/images/previous.png"/>
    </a>
    
    <a>
      <xsl:attribute name="href">
<xsl:value-of select="$library_name"/>?a=d&amp;c=<xsl:value-of select="/page/pageResponse/collection/@name"/>&amp;d=<xsl:value-of select="@selectedNode"/>.np&amp;sib=1&amp;p.s=<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.s']/@value"/>&amp;p.sa=<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.sa']/@value"/>&amp;p.a=<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.a']/@value"/>
</xsl:attribute>
      <img class="morearrow" src="interfaces/{$interface_name}/images/next.png"/>
    </a>
  </xsl:template>


  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="langfrag">
    <xsl:param name="name"/>
    <script type="text/javascript">
      <xsl:value-of disable-output-escaping="yes" select="util:getInterfaceStringsAsJavascript($interface_name, /page/@lang, $name)"/>
    </script>
  </xsl:template>


  
  <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="equivDocLinks">
    <xsl:param name="count"/>

      <xsl:variable name="docicon" select="metadataList/metadata[contains(@name, 'equivDocIcon')]"/>
      <xsl:variable name="docEndlink" select="metadataList/metadata[contains(@name, '/equivDocLink')]"/>

      	
      
      <xsl:variable name="docStartlink">
	<xsl:for-each select="metadataList/metadata">
	  <xsl:if test="contains(@name, 'equivDocLink')">	
	    <xsl:variable name="tmpvar" select="substring(@name, string-length(@name)-12, 1)"/>	
	      <xsl:if test="not($tmpvar='/')">
	        <xsl:value-of select="self::node()[@name]"/> 	        
	      </xsl:if>		
	  </xsl:if>
	</xsl:for-each>	
      </xsl:variable>

      <xsl:variable name="equivDocIcon" select="java:org.greenstone.gsdl3.util.XSLTUtil.getNumberedItem($docicon, $count)"/>
      <xsl:variable name="equivStartlink" select="java:org.greenstone.gsdl3.util.XSLTUtil.getNumberedItem($docStartlink, $count)"/>
      <xsl:variable name="equivEndlink" select="java:org.greenstone.gsdl3.util.XSLTUtil.getNumberedItem($docEndlink, $count)"/>

      <xsl:if test="$equivDocIcon != ''">
        <xsl:value-of disable-output-escaping="yes" select="$equivStartlink"/>
        <xsl:value-of disable-output-escaping="yes" select="$equivDocIcon"/>
        <xsl:value-of disable-output-escaping="yes" select="$equivEndlink"/>

        
        <xsl:call-template name="equivDocLinks">
          <xsl:with-param name="count">
<xsl:value-of select="$count + 1"/>
</xsl:with-param>
        </xsl:call-template>
      </xsl:if>

  </xsl:template>

<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="collNameChecked">
		<xsl:choose>
		<xsl:when test="$collName = '' and /page/pageRequest/paramList/param[@name='p.c']/@value">
			<xsl:value-of select="/page/pageRequest/paramList/param[@name='p.c']/@value"/>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$collName"/>
		</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="siteURL">
<xsl:value-of select="/page/pageResponse/metadataList/metadata[@name='siteURL']"/>
</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="/">
		<xsl:call-template name="mainTemplate"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="mainTemplate">

		<html>

			<head>
				
				<xsl:call-template name="create-html-header"/>
				<xsl:call-template name="berryBasketHeadTags"/>	
			</head>
			
			<body>
<xsl:call-template name="textDirectionAttribute"/>
<xsl:call-template name="actionClass"/>
				
				
				<a name="top">
<xsl:text> </xsl:text>
</a>
				
				<div class="ui-state-default ui-corner-top" id="topArea">
					<table>
						<tbody>
							<tr>
								<td>
<div id="breadcrumbs">
<xsl:call-template name="breadcrumbs"/>
<xsl:text> </xsl:text>
</div>
</td>
								
								
								<td>
<xsl:call-template name="home-help-preferences"/>
</td>
							</tr>
						</tbody>
					</table>
				</div>
				
				<div class="ui-corner-all" id="container">

					
					<xsl:call-template name="create-banner"/>
					
					<xsl:if test="/page/pageRequest/paramList/param[(@name='formatedit') and (@value='on')]">
						<xsl:call-template name="formatmanagerpre"/>
					</xsl:if>
    
					<div class="ui-widget-content" id="gs_content">
						
						<xsl:apply-templates select="/page"/>

					</div>

					<xsl:call-template name="gs_footer"/>
				</div>
			</body>
		</html>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="gs_footer">
		<div class="ui-widget-header ui-corner-bottom" id="gs_footer">
			<a href="http://www.greenstone.org/greenstone3-home">
<xsl:call-template name="poweredByGS3TextBar"/>
</a>
		</div>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="create-html-header">
		<base>
			<xsl:attribute name="href">
				<xsl:choose>
					<xsl:when test="/page/pageResponse/metadataList/metadata[@name = 'siteURL']">
						<xsl:value-of select="/page/pageResponse/metadataList/metadata[@name = 'siteURL']"/>
					</xsl:when>
					<xsl:when test="/page/pageRequest/@baseURL">
						<xsl:value-of select="/page/pageRequest/@baseURL"/>
					</xsl:when>
				</xsl:choose>
			</xsl:attribute>
		</base>
		<xsl:comment>[if lte IE 6]&gt;&lt;/base&gt;&lt;![endif]</xsl:comment>
	
		<title>
<xsl:call-template name="pageTitle"/> :: <xsl:call-template name="siteName"/>
</title>
		
		<xsl:if test="/page/pageRequest/@action ='d'">
		  
		  <xsl:variable name="myMetadataHeader" select="/page/pageResponse/format/gsf:headMetaTags/gsf:metadata"/>
		  <xsl:for-each select="$myMetadataHeader">
		    <xsl:variable name="metaname" select="@name"/>
		    
		    <xsl:variable name="metavals" select="/page/pageResponse/document/metadataList/metadata[@name = $metaname]|/page/pageResponse/document/documentNode/metadataList/metadata[@name = $metaname]"/>
		    <xsl:for-each select="$metavals">
		      <META CONTENT="{.}" NAME="{$metaname}"/>
		    </xsl:for-each>
		  </xsl:for-each>
		  
		</xsl:if>

		<xsl:choose>
			<xsl:when test="/page/pageResponse/interfaceOptions/option[@name = 'cssTheme']/@value">
				
				<link href="{/page/pageResponse/interfaceOptions/option[@name = 'cssTheme']/@value}" rel="stylesheet" type="text/css"/>
			</xsl:when>
			<xsl:otherwise>
				<link href="interfaces/{$interface_name}/style/themes/main/jquery-ui-1.8.16.custom.css" rel="stylesheet" type="text/css"/>
			</xsl:otherwise>
		</xsl:choose>
		<link href="interfaces/{$interface_name}/style/core.css" rel="stylesheet" type="text/css"/>
		<link href="interfaces/{$interface_name}/images/favicon.ico" rel="shortcut icon"/> 
		
		<script src="interfaces/{$interface_name}/js/jquery.min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script src="interfaces/{$interface_name}/js/jquery-ui-1.10.2.custom/js/jquery-ui-1.10.2.custom.min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script src="interfaces/{$interface_name}/js/jquery.themeswitcher.min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script src="interfaces/{$interface_name}/js/jquery.blockUI.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script src="interfaces/{$interface_name}/js/ace/ace.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		
		<script src="interfaces/{$interface_name}/js/zoomer.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>

		<xsl:if test="/page/pageResponse/format[@type='display' or @type='browse' or @type='search']/gsf:option[@name='mapEnabled']/@value = 'true'">
		  <xsl:call-template name="map-scripts"/>
		</xsl:if>
		
		<xsl:if test="/page/pageResponse/format/gsf:option[@name='mapEnabledOpenLayers']/@value = 'true'">
		  <xsl:call-template name="openlayers-map-scripts"/>
		</xsl:if>


		<xsl:if test="/page/pageResponse/format/gsf:option[@name='panoramaViewerEnabled']/@value = 'true'">
		  <xsl:call-template name="panoramaViewer-scripts"/>
		</xsl:if>

		<xsl:if test="/page/pageRequest/userInformation and /page/pageRequest/userInformation/@editEnabled = 'true' and (util:contains(/page/pageRequest/userInformation/@groups, 'administrator') or util:contains(/page/pageRequest/userInformation/@groups, 'all-collections-editor') or util:contains(/page/pageRequest/userInformation/@groups, $thisCollectionEditor))">
			<xsl:if test="/page/pageRequest/paramList/param[(@name='docEdit') and (@value='on' or @value='true' or @value='1')]">
				<script defer="true" src="interfaces/{$interface_name}/js/ckeditor/ckeditor.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>	
	
			</xsl:if>
			<script src="interfaces/{$interface_name}/js/debug_scripts.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
			<script src="interfaces/{$interface_name}/js/visual-xml-editor.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		</xsl:if>
		
		<xsl:call-template name="setup-gs-variable"/>
		<xsl:call-template name="define-js-macro-variables"/>

		<xsl:call-template name="additionalHeaderContent"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="additionalHeaderContent">
	  <xsl:call-template name="additionalHeaderContent-interface"/>
	  <xsl:call-template name="additionalHeaderContent-site"/>
	  <xsl:call-template name="additionalHeaderContent-collection"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="additionalHeaderContent-interface">
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="additionalHeaderContent-site">
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="additionalHeaderContent-collection">
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="create-banner">		
		<div class="ui-widget-header ui-corner-bottom" id="gs_banner">
			<div id="titlesearchcontainer">
				<xsl:call-template name="page-title-area"/>
				<xsl:call-template name="quick-search-area"/>
				<div style="clear:both;">
<xsl:text> </xsl:text>
</div>
			</div>
			<xsl:call-template name="browsing-tabs"/>
		</div>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="browsing-tabs">
		<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service">
			<ul id="gs-nav">
				
				<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@type='browse' and @name='ClassifierBrowse']">
					
					<xsl:for-each select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='ClassifierBrowse']/classifierList/classifier">
						<li>
							<xsl:choose>
								
								<xsl:when test="util:contains(/page/pageRequest/paramList/param[@name = 'cl' and /page/pageRequest/@action = 'b']/@value, @name)">
									<xsl:attribute name="class">ui-state-default ui-corner-top ui-tabs-selected ui-state-active</xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="class">ui-state-default ui-corner-top</xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
							
							<a>
								
								<xsl:if test="displayItem[@name='description']">
									<xsl:attribute name="title">
<xsl:value-of select="displayItem[@name='description']"/>
</xsl:attribute>
								</xsl:if>
								
								
								<xsl:choose>
									<xsl:when test="@name">
										<xsl:attribute name="href">
<xsl:value-of select="$library_name"/>/collection/<xsl:value-of select="/page/pageResponse/collection[@name=$collNameChecked]/@name"/>/browse/<xsl:value-of select="@name"/>
</xsl:attribute>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="href">
<xsl:value-of select="$library_name"/>/collection/<xsl:value-of select="/page/pageResponse/collection[@name=$collNameChecked]/@name"/>/browse/1</xsl:attribute>
									</xsl:otherwise>
								</xsl:choose>
								
								
								<xsl:value-of select="displayItem[@name='name']"/>
							</a>
						</li>
					</xsl:for-each>
				</xsl:if>

				
				<xsl:for-each select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='PhindApplet']">
					<li>
						<xsl:choose>
							
							<xsl:when test="/page/pageRequest[@action='a']">
								<xsl:attribute name="class">ui-state-default ui-corner-top ui-tabs-selected ui-state-active</xsl:attribute>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="class">ui-state-default ui-corner-top</xsl:attribute>
							</xsl:otherwise>
						</xsl:choose>
						
						<a>
							<xsl:if test="displayItem[@name='description']">
								<xsl:attribute name="title">
									<xsl:value-of select="displayItem[@name='description']"/>
								</xsl:attribute>
							</xsl:if>						  
							<xsl:attribute name="href">
<xsl:value-of select="$library_name"/>?a=a&amp;rt=d&amp;s=<xsl:value-of select="@name"/>&amp;c=<xsl:value-of select="/page/pageResponse/collection/@name"/>
</xsl:attribute>
							<xsl:value-of select="displayItem[@name='name']"/>
						</a>
					</li>
				</xsl:for-each>
				
				
				<xsl:for-each select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[not(@type='query') and not(@type='browse') and not (@name='PhindApplet')]">
					<xsl:call-template name="navigationTab"/>
				</xsl:for-each>
			</ul>
			<div style="clear:both;">
<xsl:text> </xsl:text>
</div>
		</xsl:if>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="home-help-preferences">
		<ul id="bannerLinks">

		  
		  <xsl:if test="/page/pageResponse/format[@type='display' or @type='browse' or @type='search' or not(@type)]/gsf:option[@name='RSS']/@value = 'true'">
			<li>
<xslt:variable name="collName" select="/page/pageResponse/collection/@name"/>
<a>
<xslt:attribute name="href">
<xslt:value-of select="$library_name"/>?a=rss&amp;l=en&amp;site=<xslt:value-of select="$site_name"/>&amp;c=<xslt:value-of select="/page/pageResponse/collection/@name"/>
</xslt:attribute>
<img>
<xslt:attribute name="src">interfaces/default/images/rssicon.png</xslt:attribute>
</img>
</a>
</li>
		  </xsl:if>

			
			<li>
				<a href="{$library_name}/collection/{$collNameChecked}/page/pref">
					<xsl:attribute name="title">
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'pref_tip')"/>
</xsl:attribute>
					<span id="preferencesButton">
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'pref_b')"/>
</span>
					<script type="text/javascript">
						<xsl:text disable-output-escaping="yes">
							$("#preferencesButton").button({icons:{primary:"ui-icon-wrench"}});
							$("#preferencesButton .ui-button-text").css({"padding-top":"0px", "padding-bottom":"3px"});
						</xsl:text>
					</script>
				</a>
			</li>

			
			
			
			
			<li id="userMenuButton">
				<xsl:choose>
					<xsl:when test="/page/pageRequest/userInformation/@username">
						<a>
							<xsl:attribute name="href">javascript:toggleUserMenu();</xsl:attribute>
							<script type="text/javascript">
								<xsl:text disable-output-escaping="yes">
									function toggleUserMenu()
									{
										var button = $("#userMenuButton");
										var menu;

										if(button.data("userMenu"))
										{
											menu = button.data("userMenu");
											if(menu.css("display") == "block")
											{
												menu.hide();
											}
											else
											{
												menu.show();
											}
										}
										else
										{
											menu = $("&lt;UL&gt;")
												.css("position", "absolute")
												.css("display", "block")
												.css("z-index", "100")
												.css("list-style", "none outside none")
												.css("margin", "0px")
												.css("padding", "0px")
												.css("font-size", "90%");
												
											menu.attr("id", "userMenu");

											button.data("userMenu", menu);

											var settingsLink = $("&lt;a&gt;")
												.attr("href", gs.xsltParams.library_name + "/admin/AccountSettings?s1.username=</xsl:text>
<xsl:value-of select="/page/pageRequest/userInformation/@username"/>
<xsl:text disable-output-escaping="yes">");
											var settingsButton = $("&lt;LI&gt;")
												.css("padding", "3px")
												.html("Account settings")
												.addClass("ui-state-default");
											settingsLink.append(settingsButton);
											
											var editingLink = $("&lt;a&gt;")
												.attr("href", "javascript:;");
											var editingButton = $("&lt;LI&gt;")
												.css("padding", "3px")
												.html((gs.userInformation.editEnabled == "true") ? "Disable edit mode" : "Enable edit mode")
												.addClass("ui-state-default")
												.click(function()
												{
													var url = gs.xsltParams.library_name + "?a=g&amp;rt=ro&amp;s=ChangeUserEditMode&amp;s1.username=" + gs.userInformation.username + "&amp;s1.enabled=" + ((gs.userInformation.editEnabled == "true") ? "false" : "true");
													$.ajax(url)
													.success(function(response)
													{
														location.reload();
													});
												});
											editingLink.append(editingButton);

											var url = document.URL;
											var hasQueryString = (url.indexOf("?") != -1);
											var hashIndex = url.indexOf("#");
											
											var hashPart;
											if(hashIndex != -1)
											{
												hashPart = url.substring(hashIndex);
												url = url.substring(0, hashIndex);
											}
											
											var logoutLink = $("&lt;a&gt;")
												.attr("href", url + (hasQueryString ? "&amp;" : "?") + "logout=" + (hashPart ? hashPart : ""));
											var logoutButton = $("&lt;LI&gt;")
												.css("padding", "3px")
												.html("Logout")
												.addClass("ui-state-default");
											logoutLink.append(logoutButton);

											menu.append(settingsLink);
											menu.append(editingLink);
											menu.append(logoutLink);

											var buttonLeft = button.offset().left;
											var buttonTop = button.offset().top;

											var buttonHeight = button.height();

											menu.offset({top: buttonTop + buttonHeight + 4, left: buttonLeft});
											$("#topArea").append(menu);
										}
									}
								</xsl:text>
							</script>
							<span id="loginButton">
<xsl:value-of select="/page/pageRequest/userInformation/@username"/>
</span>
							<script type="text/javascript">
								<xsl:text disable-output-escaping="yes">
									$("#loginButton").button({icons:{primary:"ui-icon-unlocked"}});
									$("#loginButton .ui-button-text").css({"padding-top":"0px", "padding-bottom":"3px"});
								</xsl:text>
							</script>
						</a>
					</xsl:when>
					<xsl:otherwise>
						<a>
							<xsl:attribute name="href">
								<xsl:value-of select="$library_name"/>
								<xsl:text>?a=p&amp;sa=login&amp;redirectURL=</xsl:text>
								<xsl:value-of select="$library_name"/>
								<xsl:text>%3F</xsl:text>
								<xsl:if test="/page/pageRequest/@action">
									<xsl:text>a=</xsl:text>
									<xsl:value-of select="/page/pageRequest/@action"/>
								</xsl:if>
								<xsl:if test="/page/pageRequest/@subaction">
									<xsl:text>%26sa=</xsl:text>
									<xsl:value-of select="/page/pageRequest/@subaction"/>
								</xsl:if>
								<xsl:for-each select="/page/pageRequest/paramList/param">
									<xsl:if test="@name != 'password' and @name != 's1.password' and @name != 's1.newPassword' and @name != 's1.oldPassword'">
										<xsl:text>%26</xsl:text>
										<xsl:value-of select="@name"/>
										<xsl:text>=</xsl:text>
										<xsl:value-of select="@value"/>
									</xsl:if>
								</xsl:for-each>
							</xsl:attribute>
							<xsl:attribute name="title">
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'login_tip')"/>
</xsl:attribute>
							<span id="loginButton">
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'login_b')"/>
</span>
							<script type="text/javascript">
								<xsl:text disable-output-escaping="yes">
									$("#loginButton").button({icons:{primary:"ui-icon-locked"}});
									$("#loginButton .ui-button-text").css({"padding-top":"0px", "padding-bottom":"3px"});
								</xsl:text>
							</script>
						</a>
					</xsl:otherwise>
				</xsl:choose>
			</li>
			
			<xsl:if test="/page/pageRequest/paramList/param[(@name='debug') and (@value='on' or @value='true' or @value='1' or @value='yes')]">
				<li>
					<a href="{$library_name}/collection/{$collNameChecked}/page/debug">
						<xsl:attribute name="title">
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'debuginfo_tip')"/>
</xsl:attribute>
						<span id="debugButton">
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'debuginfo_b')"/>
</span>
						<script type="text/javascript">
							<xsl:text disable-output-escaping="yes">
								$("#debugButton").button({icons:{primary:"ui-icon-info"}});
								$("#debugButton .ui-button-text").css({"padding-top":"0px", "padding-bottom":"3px"});
							</xsl:text>
						</script>
					</a>
				</li>
			</xsl:if>
		</ul>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="page-title-area">
		<xsl:variable name="pageTitleVar">
<xsl:call-template name="pageTitle"/>
</xsl:variable>
		<div id="titlearea">
			<h2>
				
				<xsl:attribute name="style">
					<xsl:choose>
						<xsl:when test="string-length($pageTitleVar) &lt; 20">
							<xsl:text>font-size: 1.5em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 30">
							<xsl:text>font-size: 1.4em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 40">
							<xsl:text>font-size: 1.3em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 50">
							<xsl:text>font-size: 1.2em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 60">
							<xsl:text>font-size: 1.1em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 70">
							<xsl:text>font-size: 1em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 80">
							<xsl:text>font-size: 0.9em;</xsl:text>
						</xsl:when>
						<xsl:when test="string-length($pageTitleVar) &lt; 90">
							<xsl:text>font-size: 0.8em;</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>font-size: 0.7em;</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:attribute>
				
				<xsl:value-of select="$pageTitleVar"/>
			</h2>
<xsl:text> </xsl:text>
		</div>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="quick-search-area">
		<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@type='query']">
			<xsl:variable name="subaction" select="/page/pageRequest/@subaction"/>
			<div id="quicksearcharea">
				<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']">
					<xsl:choose>
					<xsl:when test="not(page/pageRequest[@action='q']) or /page/pageRequest/paramList/param[@name='qs']/@value = '1'">
					<form action="{$library_name}/collection/{$collNameChecked}/search/TextQuery">
						
						<input name="qs" type="hidden" value="1"/>
						<input name="rt" type="hidden" value="rd"/>
						<input name="s1.level" type="hidden">
							<xsl:attribute name="value">
									        <xsl:value-of select="/page/pageResponse/collection/serviceList/service[@name='TextQuery']/paramList/param[@name = 'level']/@default"/>
							</xsl:attribute>
						</input>
						<xsl:choose>
							<xsl:when test="/page/pageResponse/service[@name = 'TextQuery']/paramList/param[@name = 'startPage']">
								<input name="s1.startPage" type="hidden" value="1"/>
							</xsl:when>
							<xsl:otherwise>
								<input name="startPage" type="hidden" value="1"/>
							</xsl:otherwise>
						</xsl:choose>

						
						<span class="querybox">
							<xsl:variable name="qs">
								<xsl:apply-templates mode="calculate-default" select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='query']"/>
							</xsl:variable>
							<nobr>
								<xsl:apply-templates select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='query']">
									<xsl:with-param name="default" select="java:org.greenstone.gsdl3.util.XSLTUtil.tidyWhitespace($qs, /page/@lang)"/>
								</xsl:apply-templates>
							</nobr>
						</span>
						
						<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='index']/@type = 'enum_single'">
							<span class="textselect">
								<xsl:apply-templates select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='index']">
									<xsl:with-param name="default">
										<xsl:apply-templates mode="calculate-default" select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='index']"/>
									</xsl:with-param>
									<xsl:with-param name="hideSingle">false</xsl:with-param>
									<xsl:with-param name="quickSearch">true</xsl:with-param>
								</xsl:apply-templates>
							</span>
						</xsl:if>
												
						<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='indexSubcollection']/@type = 'enum_single'">
							<span class="textselect">
								<xsl:apply-templates select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='indexSubcollection']">
									<xsl:with-param name="default">
										<xsl:apply-templates mode="calculate-default" select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='indexSubcollection']"/>
									</xsl:with-param>
									<xsl:with-param name="hideSingle">true</xsl:with-param>
									<xsl:with-param name="quickSearch">true</xsl:with-param>
								</xsl:apply-templates>
							</span>
						</xsl:if>	
												
						<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='indexLanguage']/@type = 'enum_single'">
							<span class="textselect">
								<xsl:apply-templates select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='indexLanguage']">
									<xsl:with-param name="default">
										<xsl:apply-templates mode="calculate-default" select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/paramList/param[@name='indexLanguage']"/>
									</xsl:with-param>
									<xsl:with-param name="hideSingle">true</xsl:with-param>
									<xsl:with-param name="quickSearch">true</xsl:with-param>
								</xsl:apply-templates>
							</span>
						</xsl:if>							
						
						<xsl:if test="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']">
							<input id="quickSearchSubmitButton" type="submit">
								<xsl:attribute name="value">
									<xsl:value-of select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@name='TextQuery']/displayItem[@name='submit']"/>
								</xsl:attribute>
							</input>
							<br/>
						</xsl:if>
					</form>
					</xsl:when>
					<xsl:otherwise>
<br/>
</xsl:otherwise>
					</xsl:choose>			
				</xsl:if>
				
				<ul>
					<xsl:for-each select="/page/pageResponse/collection[@name=$collNameChecked]/serviceList/service[@type='query']">
						<li>
						<xsl:choose>
						<xsl:when test="@name = /page/pageRequest/paramList/param[@name='s']/@value and not(/page/pageRequest/paramList/param[@name='qs']/@value = 1)">
					<xsl:attribute name="class">ui-state-default ui-corner-all ui-state-active</xsl:attribute>
					</xsl:when>
					<xsl:otherwise>
					<xsl:attribute name="class">ui-state-default ui-corner-all</xsl:attribute>
					</xsl:otherwise>
					</xsl:choose>
							<a>
								<xsl:attribute name="href">
									<xsl:value-of select="$library_name"/>/collection/<xsl:value-of select="$collNameChecked"/>/search/<xsl:value-of select="@name"/>
								</xsl:attribute>
								<xsl:value-of select="displayItem[@name='name']"/>
							</a>
						</li>
					</xsl:for-each>
				</ul>
			</div>
		</xsl:if>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="map-scripts">
		<meta content="initial-scale=1.0, user-scalable=no" name="viewport"/>
		<script src="http://maps.googleapis.com/maps/api/js?sensor=false" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script src="interfaces/{$interface_name}/js/map-scripts.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script type="text/javascript">$(window).load(initializeMapScripts);</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="openlayers-map-scripts">
		<script src="interfaces/{interface_name}/js/OpenLayers.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="panoramaViewer-scripts">
           <script src="interfaces/{$interface_name}/js/three45.min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	   <script src="interfaces/{$interface_name}/js/Tween.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	   <script src="interfaces/{$interface_name}/js/Detector.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	   <script src="interfaces/{$interface_name}/js/RequestAnimationFrame.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	   <script src="interfaces/{$interface_name}/js/panoramaMarker.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	   <script src="interfaces/{$interface_name}/js/panoramaViewer.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	   <script type="text/javascript">$(window).load(initPanoramaViewer);$(window).load(_animate);</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="choose-title">
		<xslt:choose>
<xslt:when test="(.//metadataList)[last()]/metadata[@name='dc.Title']">
<xslt:for-each select="&#10;&#9;&#9;&#9;&#9;  (.//metadataList)[last()]/metadata[&#10;    (@name='dc.Title')&#10;  ]">
<xslt:if test="true()">
<xslt:if test="true() and position()&gt;1">, </xslt:if>
<xslt:value-of disable-output-escaping="yes" select="."/>
</xslt:if>
</xslt:for-each>
</xslt:when>
<xslt:when test="(.//metadataList)[last()]/metadata[@name='exp.Title']">
<xslt:for-each select="&#10;&#9;&#9;&#9;&#9;  (.//metadataList)[last()]/metadata[&#10;    (@name='exp.Title')&#10;  ]">
<xslt:if test="true()">
<xslt:if test="true() and position()&gt;1">, </xslt:if>
<xslt:value-of disable-output-escaping="yes" select="."/>
</xslt:if>
</xslt:for-each>
</xslt:when>
<xslt:when test="(.//metadataList)[last()]/metadata[@name='ex.dc.Title']">
<xslt:for-each select="&#10;&#9;&#9;&#9;&#9;  (.//metadataList)[last()]/metadata[&#10;    (@name='ex.dc.Title')&#10;  ]">
<xslt:if test="true()">
<xslt:if test="true() and position()&gt;1">, </xslt:if>
<xslt:value-of disable-output-escaping="yes" select="."/>
</xslt:if>
</xslt:for-each>
</xslt:when>
<xslt:when test="(.//metadataList)[last()]/metadata[@name='Title']">
<xslt:for-each select="&#10;&#9;&#9;&#9;&#9;  (.//metadataList)[last()]/metadata[&#10;    (@name='Title')&#10;  ]">
<xslt:if test="true()">
<xslt:if test="true() and position()&gt;1">, </xslt:if>
<xslt:value-of disable-output-escaping="yes" select="."/>
</xslt:if>
</xslt:for-each>
</xslt:when>
<xslt:otherwise>
<gsf:default>Untitled</gsf:default>
</xslt:otherwise>
</xslt:choose>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="param-display">
    <xsl:param name="ns">s1.</xsl:param>
    <xsl:variable name="pvalue">
<xsl:call-template name="param-calculate-default">
<xsl:with-param name="ns" select="$ns"/>
</xsl:call-template>
</xsl:variable>
    <div class="paramLabel">
<xsl:value-of select="displayItem[@name='name']"/>
</div>
    <div class="paramValue">
      <xsl:apply-templates select=".">
	<xsl:with-param name="default" select="$pvalue"/>
	<xsl:with-param name="ns" select="$ns"/>
      </xsl:apply-templates>
    </div>
    <br class="clear"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param" mode="calculate-default" name="param-calculate-default">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:variable name="pname">
<xsl:value-of select="$ns"/>
<xsl:value-of select="@name"/>
</xsl:variable>
		<xsl:choose>
			<xsl:when test="/page/pageRequest/paramList/param[@name=$pname]">
				<xsl:choose>
					<xsl:when test="@type='enum_multi'">
<xsl:text>,</xsl:text>
						<xsl:for-each select="/page/pageRequest/paramList/param[@name=$pname]">
							<xsl:value-of select="@value"/>,
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="/page/pageRequest/paramList/param[@name=$pname]/@value"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="@default"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='invisible']">
		<xsl:param name="ns">s1.</xsl:param>
		<input name="{$ns}{@name}" type="hidden" value="{@default}"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='boolean']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="default"/>
		<select name="{$ns}{@name}">
			<option value="0">
<xsl:if test="$default='0'">
<xsl:attribute name="selected"/>
</xsl:if>
<xsl:value-of select="option[@name='0']/displayItem[@name='name']"/>
</option>
			<option value="1">
<xsl:if test="$default='1'">
<xsl:attribute name="selected"/>
</xsl:if>
<xsl:value-of select="option[@name='1']/displayItem[@name='name']"/>
</option>
		</select>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='integer']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="default"/>
		<input name="{$ns}{@name}" size="3" type="text" value="{$default}"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='enum_single']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="hideSingle">false</xsl:param>
		<xsl:param name="default"/>
		<xsl:param name="quickSearch">false</xsl:param>
		<xsl:choose>
			<xsl:when test="count(option) = 1">
				<xsl:if test="$hideSingle = 'false'">
					<xsl:value-of select="option/displayItem[@name='name']"/>
				</xsl:if>
				<input name="{$ns}{@name}" type="hidden">
<xsl:attribute name="value">
<xsl:value-of select="option/@name"/>
</xsl:attribute>
</input>
			</xsl:when>
			<xsl:otherwise>
				<select name="{$ns}{@name}">
					<xsl:for-each select="option">
						<option value="{@name}">
<xsl:if test="@name=$default">
<xsl:attribute name="selected"/>
</xsl:if>
<xsl:value-of select="displayItem[@name='name']"/>
</option>
					</xsl:for-each>
				</select>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='enum_multi']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="default"/>
		<select name="{$ns}{@name}" size="2">
			<xsl:attribute name="multiple"/>
			<xsl:for-each select="option">
				<option value="{@name}">
<xsl:if test="contains($default, concat(',', @name, ','))">
<xsl:attribute name="selected"/>
</xsl:if>
<xsl:value-of select="displayItem[@name='name']"/>
</option>
			</xsl:for-each>
		</select>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='string']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="default"/>
		<input name="{$ns}{@name}" size="30" type="text" value="{$default}"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='text']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="default"/>
		<textarea cols="50" name="{$ns}{@name}" rows="3">
<xsl:value-of select="$default"/>
</textarea>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='multi']">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:variable name="parent" select="@name"/>

		<table>
			<tr class="queryfieldheading">
				<xsl:value-of select="displayItem[@name='name']"/>
				<xsl:for-each select="param">
					<td class="queryfieldname">
<xsl:value-of select="displayItem[@name='name']"/>
</td>
				</xsl:for-each>
			</tr>
			<xsl:apply-templates mode="contents" select=".">
				<xsl:with-param name="occurs" select="@occurs"/>
				<xsl:with-param name="ns" select="$ns"/>
			</xsl:apply-templates>
		</table>

	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type = 'checkbox_list']">
		<xsl:param name="ns">s1.</xsl:param>
		<ul class="checkboxList">
			<xsl:for-each select="option">
				<li>
<input name="{$ns}{../@name}" type="checkbox" value="{@name}"/>
<xsl:value-of select="displayItem"/>
</li>
			</xsl:for-each>
		</ul>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="param[@type='multi']" mode="contents">
		<xsl:param name="ns">s1.</xsl:param>
		<xsl:param name="occurs">1</xsl:param>
		<xsl:variable name="pos" select="@occurs - $occurs"/>	
		<tr class="queryfieldrow">
			<xsl:for-each select="param">
				<xsl:variable name="pname">
<xsl:value-of select="$ns"/>
<xsl:value-of select="@name"/>
</xsl:variable>
				<xsl:variable name="values" select="/page/pageRequest/paramList/param[@name=$pname]/@value"/>
				<td class="queryfieldcell">
					<xsl:choose>
						<xsl:when test="not(@ignore) or  @ignore != $pos">      
							<xsl:apply-templates select=".">
<xsl:with-param name="default" select="java:org.greenstone.gsdl3.util.XSLTUtil.getNumberedItem($values, $pos)"/>
<xsl:with-param name="ns" select="$ns"/>
</xsl:apply-templates>
						</xsl:when>
						<xsl:otherwise>
							<input name="{$ns}{@name}" type="hidden" value=""/>
						</xsl:otherwise>
					</xsl:choose>
				</td>
			</xsl:for-each>
		</tr>

		
		<xsl:if test="$occurs &gt; 1">
			<xsl:apply-templates mode="contents" select=".">
<xsl:with-param name="occurs" select="$occurs - 1"/>
<xsl:with-param name="ns" select="$ns"/>
</xsl:apply-templates>
		</xsl:if>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="setup-gs-variable">
		<script type="text/javascript">
			gs = new Array();
			gs.cgiParams = new Array();
			gs.xsltParams = new Array();
			gs.siteMetadata = new Array();
			gs.collectionMetadata = new Array();
			gs.documentMetadata = new Array();
			gs.imageURLs = new Array();
			gs.variables = new Array();
			gs.requestInformation = new Array();
		</script>
		<xsl:call-template name="populate-cgi-param-values"/>
		<xsl:call-template name="populate-xslt-param-values"/>
		<xsl:call-template name="populate-image-url-values"/>
		<xsl:call-template name="populate-metadata-values"/>
		<xsl:call-template name="populate-request-information-values"/>
		<xsl:call-template name="populate-user-information-values"/>
		<xsl:call-template name="include-global-javascript-functions"/>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="populate-cgi-param-values">
		<script type="text/javascript">
			var name;
			var value;
			<xsl:for-each select="/page/pageRequest/paramList/param">
				<xsl:text disable-output-escaping="yes">name = "</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">value = "</xsl:text>
<xsl:value-of select="util:escapeNewLinesAndQuotes(@value)"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">name = name.replace(".", "_");</xsl:text>
				gs.cgiParams[name] = value;
			</xsl:for-each>
		</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="populate-xslt-param-values">
		<script type="text/javascript">
			<xsl:text disable-output-escaping="yes">gs.xsltParams.library_name = "</xsl:text>
<xsl:value-of select="$library_name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.xsltParams.interface_name = "</xsl:text>
<xsl:value-of select="$interface_name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.xsltParams.site_name = "</xsl:text>
<xsl:value-of select="$site_name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
		</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="populate-metadata-values">
		<script type="text/javascript">
			<xsl:text disable-output-escaping="yes">
				function addMetadataToList(name, value, list, lang)
				{
					name = name.replace(".", "_");
					if(lang == "" || lang == "en")
					{
						list[name] = value;
					}
					else
					{
						if (list[lang] == undefined)
						{
							list[lang] = new Array();
						}
						var langList = list[lang];
						langList[name] = value;
					}
				}
				var name;
				var value;
				var lang;
			</xsl:text>
			<xsl:for-each select="/page/pageResponse/metadataList/metadata">
				<xsl:text disable-output-escaping="yes">name = "</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">value = "</xsl:text>
<xsl:value-of disable-output-escaping="yes" select="util:escapeNewLinesAndQuotes(.)"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">lang = "</xsl:text>
<xsl:value-of select="@lang"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				addMetadataToList(name, value, gs.siteMetadata, lang);
			</xsl:for-each>
		
			<xsl:for-each select="/page/pageResponse/collection/metadataList/metadata">
				<xsl:text disable-output-escaping="yes">name = "</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">value = "</xsl:text>
<xsl:value-of disable-output-escaping="yes" select="util:escapeNewLinesAndQuotes(.)"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">lang = "</xsl:text>
<xsl:value-of select="@lang"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				addMetadataToList(name, value, gs.collectionMetadata, lang);
			</xsl:for-each>
		
			<xsl:for-each select="/page/pageResponse/document/metadataList/metadata">
				<xsl:text disable-output-escaping="yes">name = "</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">value = "</xsl:text>
<xsl:value-of disable-output-escaping="yes" select="util:escapeNewLinesAndQuotes(.)"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">lang = "</xsl:text>
<xsl:value-of select="@lang"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				addMetadataToList(name, value, gs.documentMetadata, lang);
			</xsl:for-each>
			
			<xsl:for-each select="/page/pageResponse/classifier/documentNode">
				{
				<xsl:text disable-output-escaping="yes">var nodeID = "</xsl:text>
<xsl:value-of select="@nodeID"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
				<xsl:text disable-output-escaping="yes">var emptyLang = "";</xsl:text>
				<xsl:text disable-output-escaping="yes">var metaList = new Array();</xsl:text>
				<xsl:for-each select="metadataList/metadata">
					<xsl:text disable-output-escaping="yes">name = "</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
					<xsl:text disable-output-escaping="yes">value = "</xsl:text>
<xsl:value-of disable-output-escaping="yes" select="util:escapeNewLinesAndQuotes(.)"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
					<xsl:text disable-output-escaping="yes">lang = "</xsl:text>
<xsl:value-of select="@lang"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
					addMetadataToList(name, value, metaList, lang);
				</xsl:for-each>
				addMetadataToList(nodeID, metaList, gs.documentMetadata, emptyLang);
				}
			</xsl:for-each>
			
			<xsl:text disable-output-escaping="yes">addMetadataToList("docType", "</xsl:text>
<xsl:value-of select="/page/pageResponse/document/@docType"/>
<xsl:text disable-output-escaping="yes">", gs.documentMetadata, "</xsl:text>
<xsl:value-of select="@lang"/>
<xsl:text disable-output-escaping="yes">");</xsl:text>
		</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="populate-image-url-values">
		<script type="text/javascript">
			<xsl:text disable-output-escaping="yes">gs.imageURLs.expand = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'expand_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.collapse = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'collapse_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.page = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'page_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.chapter = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'chapter_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.realisticBook = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'realistic_books_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.highlight = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'highlight_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.bookshelf = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'bookshelf_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.book = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'book_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.loading = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'loading_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.pageIcon = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'page_icon_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.trashFull = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'trash_full_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.blank = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'blank_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text> 
			<xsl:text disable-output-escaping="yes">gs.imageURLs.next = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'next_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.prev = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'prev_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.trashEmpty = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'trash_empty_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.trashFull = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'trash_full_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
			<xsl:text disable-output-escaping="yes">gs.imageURLs.greenBug = "</xsl:text>
<xsl:value-of select="util:getInterfaceText($interface_name, /page/@lang, 'green_bug_image')"/>
<xsl:text disable-output-escaping="yes">";</xsl:text>
		</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="populate-request-information-values">
		<script type="text/javascript">
			<xsl:text disable-output-escaping="yes">
				gs.requestInformation.fullURL = "</xsl:text>
<xsl:value-of select="/page/pageRequest/@fullURL"/>
<xsl:text disable-output-escaping="yes">";
			</xsl:text>
		</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="populate-user-information-values">
		<xsl:if test="/page/pageRequest/userInformation">
			<script type="text/javascript">
				<xsl:text disable-output-escaping="yes">
					gs.userInformation = new Array();
					gs.userInformation.username = "</xsl:text>
<xsl:value-of select="/page/pageRequest/userInformation/@username"/>
<xsl:text disable-output-escaping="yes">";
					gs.userInformation.groups = "</xsl:text>
<xsl:value-of select="/page/pageRequest/userInformation/@groups"/>
<xsl:text disable-output-escaping="yes">";
					gs.userInformation.editEnabled = "</xsl:text>
<xsl:value-of select="/page/pageRequest/userInformation/@editEnabled"/>
<xsl:text disable-output-escaping="yes">";
				</xsl:text>
			</script>
		</xsl:if>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="include-global-javascript-functions">
		<script src="interfaces/default/js/javascript-global-functions.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
		<script src="interfaces/default/js/GSMetadata.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
	</xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="formatmanagerpre">
    
        
        

        

        

        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        
        
        <script src="interfaces/default/js/jquery.xml.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        <script src="interfaces/default/js/jquery-ui-1.8.15/ui/jquery-ui-1.8.15.custom.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        <script src="interfaces/default/js/jquery.selectboxes.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        <script src="interfaces/default/js/innerxhtml.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        
        <script src="interfaces/default/js/format_browse.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        <script src="interfaces/default/js/format_document.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        <script src="interfaces/default/js/format_util.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
        <script src="interfaces/default/js/format_jquery_prototypes.js" type="text/javascript">
<xsl:text> </xsl:text>
</script>
       
        <xsl:call-template name="xml-to-gui-templates">
            <xsl:with-param name="node-set" select="test"/>
            <xsl:with-param name="metadataSets" select="//metadataSetList"/>
        </xsl:call-template>

        <xsl:variable name="fmt1">
            <xsl:call-template name="xml-to-string">
                <xsl:with-param name="node-set" select="//format[@type='browse']"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:variable name="meta">
            <xsl:call-template name="xml-to-string">
                <xsl:with-param name="node-set" select="//metadataSetList"/>
            </xsl:call-template>
        </xsl:variable>

        <style type="text/css">
		
            .placeholder{margin-left: 10px; border: dashed 1px #ccc; background-color:#FFFFCC; height:20px; }

            .placeholder_td{margin-left: 10px; border: dashed 1px #ccc; background-color:#FFFFCC; width:20px; }

            .header { background-color: #AFCCAF; border: solid 1px #117711; padding: 5px; padding-left: 10px; }

            .resizable { width: 150px; height: 150px; padding: 0.5em; } 
            
			.indent { margin-left: 15px; }
            .block { margin-left: 15px; border-left: dashed 1px black;}

            .droppable { background-color: #99dd99;}
            .droppable_hl { border: dashed 1px #ccc; background-color:#FFFFCC; }

            #XSLTcode {width: 99%; }

            .elementToolBox {position: fixed; top: 25%; right: 0px; background: white; border: 2px solid; padding: 10px 10px 10px 0px;}
			
			.elementToolBoxHeader { font-weight:bold; }
			
            .visible {display: block;}
            .hidden {display: none;}
            

            
        </style>

        <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.1/themes/base/jquery-ui.css" rel="stylesheet" type="text/css"/> 

        <table border="1" width="100%"> 

            <td width="100%">
                <xsl:choose>
                    <xsl:when test="/page/pageRequest/@action = 'd'">
                        
                        <xsl:choose>
                            <xsl:when test="/page/pageResponse/format[@type='display']/gsf:option[@name='TOC']/@value='true'">
                                <input checked="checked" name="TOC" onclick="displayTOC(this)" type="checkbox">Display Table of Contents (set to true)</input>
                            </xsl:when>
                            <xsl:otherwise>
                                <input name="TOC" onclick="displayTOC(this)" type="checkbox">Display Table of Contents (set to false)</input>
                            </xsl:otherwise>
                        </xsl:choose> <br/>

                        
                        <xsl:choose>
                            <xsl:when test="/page/pageResponse/format[@type='display']/gsf:option[@name='coverImage']/@value='true'">
                                <input checked="checked" name="bookCover" onclick="displayBookCover(this)" type="checkbox">Display Book Cover Image (set to true)</input>
                            </xsl:when>
                            <xsl:otherwise>
                                <input name="bookCover" onclick="displayBookCover(this)" type="checkbox">Display Book Cover Image (set to false)</input>
                            </xsl:otherwise>
                        </xsl:choose> <br/>

                        <textarea id="XSLTcode" rows="5">
                        The XSLT code for the relevant part of the page will be displayed here.
                        </textarea>
                        
                        <br/>
                        <table>
                            <td>
                                <button id="saveDocumentChanges" onclick="saveDocumentChanges()" type="button">Save Changes</button>
                            </td>
                            <td>
                                <form>
                                    <input checked="true" id="applyToDocument" name="documentChanges" type="radio" value="document"/>Apply to this document only
                                    <input id="applyToCollection" name="documentChanges" type="radio" value="collection"/>Apply to collection
                                </form>
                            </td>
                        </table>
                    </xsl:when>
                    <xsl:otherwise>
                        <table>
                            <td>
                                <button id="updateFormatStatement" onclick="updateFormatStatement()" type="button">Update Format Statement</button>
                            </td>
                            <td>
                                <button id="saveFormatStatement" onclick="saveFormatStatement()" type="button">Save Format Statement</button>
                            </td>
                            <td>
                                <form>
                                    <input checked="true" id="applyToThis" name="classifiers" type="radio" value="this"/>This Classifier
                                    <input id="applyToAll" name="classifiers" type="radio" value="all"/>All Classifiers
                                </form> 
                            </td>
                        </table>

                        <div id="formatStatement">
                            <div id="formatRoot">
                                <xsl:call-template name="xml-to-gui">
                                    <xsl:with-param name="node-set" select="//format"/> 
                                    <xsl:with-param name="metadataSets" select="//metadataSetList"/> 
                                </xsl:call-template> 
                            </div>
                        </div>
                    </xsl:otherwise>
                </xsl:choose>
            </td>    
        </table>

        <div class="elementToolBox">
            <p class="indent elementToolBoxHeader">Elements to add</p>
            
                <div class="draggable_gsf_template css_gsf_template block" title="gsf:template">
                    <table class="header">
                        <tbody>
                            <tr>
                                <td class="header">MATCH=<input name="rawtextinput" size="10" type="text"/>
</td>
                                <td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_choose_metadata css_gsf_choose_metadata block" title="gsf:choose-metadata">
                    <table class="header">
                        <tbody>
                            <tr>
                                <td class="header">CHOOSE</td>
                                <td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#" title="Click me to expand">[-]</a>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_metadata css_gsf_metadata block" title="gsf:metadata">
                    <table class="header">
                        <tbody>
                            <tr>
								<td class="header" style="font-size: 0.8em;">METADATA</td>
                                <td class="header" id="metadataSelector">
                                    
                                </td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_link css_gsf_link block" title="gsf:link">
                    <table class="header">
                        <tbody>
                            <tr>
								<td class="header">LINK</td>
                                <td class="header">
<select>
                                    <option selected="document" value="document">Document</option>
                                    <option value="classifier">Classifier</option>
                                    <option value="source">Source</option>
                                    <option value="horizontal">Horizontal</option>
                                </select>
</td>
                                <td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_switch css_gsf_switch block" title="gsf:switch">
                    <table class="header">
                        <tbody>
                            <tr>
                                <td class="header">SWITCH</td>
                                <td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_when css_gsf_when block" title="gsf:when">
                    <table class="header">
                        <tbody>
                            <tr>
                                <td class="header">WHEN <xsl:value-of select="@test"/>
</td>
                                <td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#"/>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_otherwise css_gsf_otherwise block" title="gsf:otherwise">
                    <table class="header">
                        <tbody>
                            <tr>
                                <td class="header">OTHERWISE</td>
                                <td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#"/>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="draggable_gsf_icon css_gsf_icon block" title="gsf:icon">
                    <table class="header">
                        <tbody>
                            <tr>
                                <td class="header">ICON</td>
								<td class="header">
<select>
                                    <option selected="document" value="document">Document</option>
                                    <option value="classifier">Classifier</option>
                                    <option value="source">Source</option>
                                </select>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="draggable_gsf_text css_text block" title="text">
                    <table class="header">
                        <tbody>
                            <tr>
								<td class="header">TEXT</td>
                                <td class="header">
<input name="rawtextinput" size="10" type="text" value=""/>
</td>
                                <td class="header">
<a class="ui-icon ui-icon-closethick" href="#"/>
</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="draggable_table css_table block" title="gsf:table">
					<table class="header">
                        <tbody>
                            <tr>
                                <td class="header">NEW TABLE</td>
							</tr>
						</tbody>
					</table>
				</div>
				<div class="draggable_tr css_tr block" title="gsf:table">
					<table class="header">
                        <tbody>
                            <tr>
                                <td class="header">NEW TABLE ROW</td>
							</tr>
						</tbody>
					</table>
				</div>
				<div class="draggable_td css_td block" title="gsf:table">
					<table class="header">
                        <tbody>
                            <tr>
                                <td class="header">NEW TABLE COLUMN</td>
							</tr>
						</tbody>
					</table>
				</div>
         </div>

        
        
      

      
                    
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="formatmanagerpost">
           
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml-to-gui">
        <xsl:param name="node-set" select="."/>
        <xsl:param name="metadataSets" select="."/> 

        <xsl:value-of select="metadataSets[@name]"/>
        <xsl:apply-templates mode="xml-to-gui" select="$node-set">
            <xsl:with-param name="depth" select="1"/>
            <xsl:with-param name="metadataSets" select="$metadataSets"/> 
        </xsl:apply-templates>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="/" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>
        
        <xsl:apply-templates mode="xml-to-gui">
            <xsl:with-param name="depth" select="$depth"/>
            <xsl:with-param name="metadataSets" select="$metadataSets"/>
        </xsl:apply-templates>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="meta-to-combo">
        <xsl:param name="metadataSets" select="."/>
        <xsl:param name="current" select="."/> 

        <xsl:variable name="current_mod">
            <xsl:choose>
                <xsl:when test="contains($current,'.')">
<xsl:value-of select="$current"/>
</xsl:when>
                <xsl:when test="$current!=''">ex.<xsl:value-of select="$current"/>
</xsl:when>
                <xsl:otherwise>ex.Title</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="exists">
        <xsl:apply-templates mode="search-meta-to-combo" select="$metadataSets">
            <xsl:with-param name="current" select="$current_mod"/> 
        </xsl:apply-templates>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="$exists='TRUE'">
                <select name="meta_select" onChange="onSelectChange(this)">
                    <xsl:apply-templates mode="meta-to-combo" select="$metadataSets">
                        <xsl:with-param name="current" select="$current_mod"/>
                    </xsl:apply-templates>
                </select>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$current_mod"/>
            </xsl:otherwise>
        </xsl:choose>

    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="metadataSet" mode="search-meta-to-combo">
        <xsl:param name="current"/>

        <xsl:variable name="set">
<xsl:value-of select="substring-before($current, '.')"/>
</xsl:variable>

        <xsl:if test="@name=$set">
        <xsl:apply-templates mode="search-meta-to-combo" select="metadata">
             
            <xsl:with-param name="current" select="$current"/>
        </xsl:apply-templates>
        </xsl:if>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="metadata" mode="search-meta-to-combo">
        <xsl:param name="current"/>
        <xsl:variable name="cur">
<xsl:value-of select="substring-after($current, '.')"/>
</xsl:variable>
        <xsl:if test="@name=$cur">TRUE</xsl:if>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="*" mode="search-meta-to-combo">
        <xsl:param name="current"/>
        <xsl:apply-templates mode="search-meta-to-combo">
            <xsl:with-param name="current" select="$current"/>
        </xsl:apply-templates>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="metadataSet" mode="meta-to-combo">
        <xsl:param name="current"/>

        <xsl:apply-templates mode="meta-to-combo">
            <xsl:with-param name="set" select="@name"/> 
            <xsl:with-param name="current" select="$current"/>
        </xsl:apply-templates>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="metadata" mode="meta-to-combo">
        <xsl:param name="set"/>
        <xsl:param name="current"/>

        <xsl:variable name="meta">
<xsl:value-of select="$set"/>.<xsl:value-of select="@name"/>
</xsl:variable>

        <xsl:choose>
            <xsl:when test="$current = $meta">
                <xsl:text disable-output-escaping="yes">&lt;option value="</xsl:text>
<xsl:value-of select="$meta"/>
<xsl:text disable-output-escaping="yes">" selected="selected"&gt;</xsl:text>
<xsl:value-of select="$meta"/>
<xsl:text disable-output-escaping="yes">&lt;/option&gt;</xsl:text>
                
            </xsl:when>
            <xsl:otherwise>
                <option value="{$meta}">
<xsl:value-of select="$meta"/>
</option>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="*" mode="meta-to-combo">
        <xsl:param name="current"/>
        <xsl:apply-templates mode="meta-to-combo">
            <xsl:with-param name="current" select="$current"/>
        </xsl:apply-templates>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:choose-metadata" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_choose_metadata css_gsf_choose_metadata block" title="gsf:choose-metadata">
        <table class="header">
<tbody>
<tr>
<td class="header">CHOOSE</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#" title="Click me to expand">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
</tr>
</tbody>
</table>
                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/> 
                </xsl:apply-templates>
        </div>   
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:metadata" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        

        <div class="gsf_metadata css_gsf_metadata block leaf" title="gsf:metadata">
            <xsl:variable name="combo">
                <xsl:call-template name="meta-to-combo">
                        <xsl:with-param name="metadataSets" select="$metadataSets"/>
                        <xsl:with-param name="current" select="@name"/>
                     </xsl:call-template>
            </xsl:variable>
        <table class="header">
<tbody>
<tr>
<td class="header">
<xsl:copy-of select="$combo"/>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
</tr>
</tbody>
</table>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:link" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_link css_gsf_link block" title="gsf:link">
        <xsl:variable name="link">
                LINK<select name="link_select" onChange="onSelectChange(this)">
                    <xsl:choose>
                        <xsl:when test="@type='document'">
        	                <option selected="selected" value="document">Document</option>
	                        <option value="classifier">Classifier</option>
                            <option value="source">Source</option>
                        </xsl:when>
                        <xsl:when test="@type='classifier'">
	                        <option selected="selected" value="classifier">Classifier</option>
                            <option value="document">Document</option>
                            <option value="source">Source</option>
                        </xsl:when>
                        <xsl:when test="@type='source'">
                	        <option selected="selected" value="source">Source</option>
                            <option value="document">Document</option>
                            <option value="classifier">Classifier</option>
                        </xsl:when>
                        <xsl:when test="@type='horizontal'">
                            <option selected="selected" value="horizontal">Horizontal</option>
                            <option value="source">Source</option>
                            <option value="document">Document</option>
                            <option value="classifier">Classifier</option>
                        </xsl:when>
                  </xsl:choose>
	            </select>
        </xsl:variable>
        <table class="header">
<tbody>
<tr>
<td class="header">
<xsl:copy-of select="$link"/>
</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#" title="Click me to expand">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
</tr>
</tbody>
</table>
                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/> 
                </xsl:apply-templates>
        </div> 
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:template" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_template css_gsf_template block" title="gsf:template">
            <xsl:variable name="mode">
                <xsl:choose>
                    <xsl:when test="not(@mode)">MODE=<input class="mode" name="rawtextinput" onChange="onTextChange(this, this.value)" size="10" type="text" value="vertical">
<xsl:text/>
</input>
</xsl:when>
                    <xsl:otherwise>MODE=<input class="mode" name="rawtextinput" onChange="onTextChange(this, this.value)" size="10" type="text" value="{@mode}"/>
</xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
    
            <table class="header">
<tbody>
<tr>
<td class="header">MATCH=<input class="match" name="rawtextinput" onChange="onTextChange(this, this.value)" size="10" type="text" value="{@match}"/>
</td>
<td class="header">
<xsl:copy-of select="$mode"/>
</td>
<td class="header">
<a class="minmax ui-icon ui-icon-plusthick" href="#" title="Click me to expand">[+]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
</tr>
</tbody>
</table>

                <table border="1" class="table">
                <tbody>
                <tr class="tr">
                <td class="droppable" width="10px"/>
                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/> 
                </xsl:apply-templates>
                </tr>
                </tbody>
                </table>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:switch" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_switch css_gsf_switch block" title="gsf:switch">
                <table class="header">
<tbody>
<tr>
<td class="header">SWITCH</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="#"/>
</td>
</tr>
</tbody>
</table>
                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/>
                </xsl:apply-templates>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:when" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_when css_gsf_when block" title="gsf:when"> 
                <table class="header">
<tbody>
<tr>
<td class="header">WHEN<xsl:value-of select="@test"/>
</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="[myhref]"/>
</td>
</tr>
</tbody>
</table>
                <xsl:apply-templates mode="xml-to-gui">
                  <xsl:with-param name="depth" select="$depth"/>
                  <xsl:with-param name="metadataSets" select="$metadataSets"/>
                </xsl:apply-templates>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:otherwise" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_otherwise css_gsf_otherwise block" title="gsf:otherwise">
                <table class="header">
<tbody>
<tr>
<td class="header">OTHERWISE</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="remove" href="#">[x]</a>
</td>
<td>
<a class="ui-icon ui-icon-closethick" href="#"/>
</td>
</tr>
</tbody>
</table>
                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/>
                </xsl:apply-templates>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:icon" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="gsf_icon css_gsf_icon block leaf" title="gsf:icon">
            <xsl:variable name="icon">
                ICON<select name="icon_select" onChange="onSelectChange(this, this.value)">
                    <xsl:choose>
                        <xsl:when test="@type='document'">
                            <option selected="selected" value="document">Document</option>
                            <option value="classifier">Classifier</option>
                            <option value="source">Source</option>
                        </xsl:when>
                        <xsl:when test="@type='classifier'">
                            <option selected="selected" value="classifier">Classifier</option>
                            <option value="document">Document</option>
                            <option value="source">Source</option>
                        </xsl:when>
                        <xsl:when test="@type='source'">
                            <option selected="selected" value="source">Source</option>
                            <option value="document">Document</option>
                            <option value="classifier">Classifier</option>
                        </xsl:when>
                  </xsl:choose>
                </select>
                </xsl:variable>
            <table class="header">
<tbody>
<tr>
<td class="header">
<xsl:copy-of select="$icon"/>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
</tr>
</tbody>
</table>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="gsf:default" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="block gsf_default" title="gsf:default">
                <table class="header">
<tbody>
<tr>
<td class="header">DEFAULT</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#" title="Click me to expand">[-]</a>
</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="[myhref]"/>
</td>
</tr>
</tbody>
</table>
                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/>
                </xsl:apply-templates>
        </div>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="text()" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>
        
        <xsl:variable name="rawtext">
<xsl:value-of select="."/>
</xsl:variable>

        <xsl:if test="normalize-space($rawtext) != '' ">
            <div class="block leaf gsf_text" title="gsf:text">
                <table class="header">
                    <tbody>
                        <tr>
                            <td class="header">
                                <input class="text" name="rawtextinput" onChange="onTextChange(this, this.value)" size="10" type="text" value="{$rawtext}"/>
                            </td>
                            <td class="header">
                                <a class="ui-icon ui-icon-closethick" href="[myhref]"/>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </xsl:if>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="td" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>
        
        <td class="column" title="td" valign="{@valign}">
            <div class="td-div" title="td-div">
            <div class="neverempty block" style="height:25px">NEVER EMPTY</div>

                <xsl:apply-templates mode="xml-to-gui">
                    <xsl:with-param name="depth" select="$depth"/>
                    <xsl:with-param name="metadataSets" select="$metadataSets"/> 
                </xsl:apply-templates>
            </div>
        </td>
        <td class="droppable" title="Drag a new column on to me" width="10px"/>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="br" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="block leaf gsf_text" title="gsf:text">
                <table class="header">
<tbody>
<tr>
<td class="header">&lt;<input class="text" name="rawtextinput" size="10" type="text" value="br/"/>&gt;</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="[myhref]"/>
</td>
</tr>
</tbody>
</table>
        </div>
    
        <xsl:apply-templates mode="xml-to-gui">
            <xsl:with-param name="depth" select="$depth"/>
            <xsl:with-param name="metadataSets" select="$metadataSets"/>
        </xsl:apply-templates>
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="i" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <div class="block leaf gsf_text" title="gsf:text">
                <table class="header">
<tbody>
<tr>
<td class="header">&lt;<input class="text" name="rawtextinput" size="10" type="text" value="i"/>&gt;</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="[myhref]"/>
</td>
</tr>
</tbody>
</table>
        </div>
    
        <xsl:apply-templates mode="xml-to-gui">
            <xsl:with-param name="depth" select="$depth"/>
            <xsl:with-param name="metadataSets" select="$metadataSets"/>
        </xsl:apply-templates>

        <div class="block leaf gsf_text" title="gsf:text">
                <xsl:variable name="rawtext">
<xsl:text disable-output-escaping="no">/i</xsl:text>
</xsl:variable>
                <table class="header">
<tbody>
<tr>
<td class="header">&lt;<input class="text" name="rawtextinput" size="10" type="text" value="{$rawtext}"/>&gt;</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="[myhref]"/>
</td>
</tr>
</tbody>
</table>
        </div>

    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="*" mode="xml-to-gui">
        <xsl:param name="depth"/>
        <xsl:param name="metadataSets"/>

        <xsl:apply-templates mode="xml-to-gui"> 
            <xsl:with-param name="depth" select="$depth"/> 
            <xsl:with-param name="metadataSets" select="$metadataSets"/> 
        </xsl:apply-templates> 
    </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml-to-gui-templates">
        <xsl:param name="node-set" select="."/>
        <xsl:param name="metadataSets" select="."/>
    
    
    

    
    
        <xsl:variable name="choose_metadata">
            <div class="gsf_choose_metadata css_gsf_choose_metadata block" title="gsf:choose-metadata">
<table class="header">
<tbody>
<tr>
<td class="header">CHOOSE</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#" title="Click me to expand">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#" title="Click me to remove"/>
</td>
</tr>
</tbody>
</table>
</div>
        </xsl:variable>

        <script type="text/javascript">
            gsf_choose_metadata_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$choose_metadata"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>   
        </script>   


    
    
    

    
        <xsl:variable name="link">
        <div class="gsf_link css_gsf_link block" title="gsf:link">
<table class="header">
<tbody>
<tr>
<td class="header">LINK<select>
        	                <option selected="document" value="document">Document</option>
	                        <option value="classifier">Classifier</option>
                            <option value="source">Source</option>
                            <option value="horizontal">Horizontal</option>
	            </select>
</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
<a class="remove ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
</tr>
</tbody>
</table>
</div> 
        </xsl:variable>

        <script type="text/javascript">
            gsf_link_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$link"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>   
        </script>


    

        <xsl:variable name="template">
        <div class="gsf_template css_gsf_template block" title="gsf:template">
<table class="header">
<tbody>
<tr>
<td class="header">MATCH=<input name="rawtextinput" size="10" type="text"/>
</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
</tr>
</tbody>
</table>
<table border="1">
<tr class="tr">
<td class="droppable" width="10px"/>
</tr>
</table>
</div>
<br/>
        </xsl:variable>

        <script type="text/javascript">
            gsf_template_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$template"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>      
        </script>


    

        <xsl:variable name="switch">
        <div class="gsf_switch css_gsf_switch block" title="gsf:switch">
<table class="header">
<tbody>
<tr>
<td class="header">SWITCH</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
</tr>
</tbody>
</table>
</div>
        </xsl:variable>

        <script type="text/javascript">
            gsf_switch_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$switch"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>
        </script>


    

        <xsl:variable name="when">
        <div class="gsf_when css_gsf_when block" title="gsf:when">
<table class="header">
<tbody>
<tr>
<td class="header">WHEN<input name="rawtextinput" size="10" type="text"/>
</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
</tr>
</tbody>
</table>
</div>
        </xsl:variable>

        <script type="text/javascript">
            gsf_when_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$when"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>
        </script>

    

        <xsl:variable name="otherwise">
        <div class="gsf_otherwise css_gsf_otherwise block" title="gsf:otherwise">
<table class="header">
<tbody>
<tr>
<td class="header">OTHERWISE</td>
<td class="header">
<a class="minmax ui-icon ui-icon-minusthick" href="#">[-]</a>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
</tr>
</tbody>
</table>
</div>
        </xsl:variable>

        <script type="text/javascript">
            gsf_otherwise_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$otherwise"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>
        </script>

    
    
        <xsl:variable name="icon">
        <div class="gsf_icon css_gsf_icon block leaf" title="gsf:icon">
<table class="header">
<tbody>
<tr>
<td class="header">ICON<select>
<option selected="document" value="document">Document</option>
<option value="classifier">Classifier</option>
<option value="source">Source</option>
</select>
</td>
<td class="header">
<a class="remove ui-icon ui-icon-closethick" href="#">[x]</a>
</td>
</tr>
</tbody>
</table>
</div>
        </xsl:variable>

        <script type="text/javascript">
            gsf_icon_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$icon"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>
        </script>

    

        <xsl:variable name="text">
        <div class="block leaf gsf_text" title="gsf:text">
                <xsl:variable name="rawtext">
<xsl:value-of select="."/>
</xsl:variable>
                <table class="header">
<tbody>
<tr>
<td class="header">
<input name="rawtextinput" size="10" type="text" value=""/>
</td>
<td class="header">
<a class="ui-icon ui-icon-closethick" href="[myhref]"/>
</td>
</tr>
</tbody>
</table>
        </div>
        </xsl:variable>

        <script type="text/javascript">
            gsf_text_element = <xsl:text disable-output-escaping="yes">'</xsl:text>
<xsl:copy-of select="$text"/>
<xsl:text disable-output-escaping="yes">';</xsl:text>
        </script>

    </xsl:template>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="use-empty-syntax" select="true()"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="exclude-unused-prefixes" select="true()"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="force-exclude-all-namespaces" select="false()"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="namespaces-to-exclude" select="/.."/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="start-tag-start" select="'&lt;'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="start-tag-end" select="'&gt;'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="empty-tag-end" select="'/&gt;'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="end-tag-start" select="'&lt;/'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="end-tag-end" select="'&gt;'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="space" select="' '"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="ns-decl" select="'xmlns'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="colon" select="':'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="equals" select="'='"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="attribute-delimiter" select="'&quot;'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="comment-start" select="'&lt;!--'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="comment-end" select="'--&gt;'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pi-start" select="'&lt;?'"/>
<xsl:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pi-end" select="'?&gt;'"/>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml-to-string">
    <xsl:param name="node-set" select="."/>
    <xsl:apply-templates mode="xml-to-string" select="$node-set">
      <xsl:with-param name="depth" select="1"/>
    </xsl:apply-templates>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="/" mode="xml-to-string">
    <xsl:param name="depth"/>
    <xsl:apply-templates mode="xml-to-string">
      <xsl:with-param name="depth" select="$depth"/>
    </xsl:apply-templates>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="*" mode="xml-to-string">
    <xsl:param name="depth"/>
    <xsl:variable name="element" select="."/>
    <xsl:value-of select="$start-tag-start"/>
    <xsl:call-template name="element-name">
      <xsl:with-param name="text" select="name()"/>
    </xsl:call-template>
    <xsl:apply-templates mode="xml-to-string" select="@*"/>
    <xsl:if test="not($force-exclude-all-namespaces)">
      <xsl:for-each select="namespace::*">
        <xsl:call-template name="process-namespace-node">
          <xsl:with-param name="element" select="$element"/>
          <xsl:with-param name="depth" select="$depth"/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="node() or not($use-empty-syntax)">
        <xsl:value-of select="$start-tag-end"/>
        <xsl:apply-templates mode="xml-to-string">
          <xsl:with-param name="depth" select="$depth + 1"/>
        </xsl:apply-templates>
        <xsl:value-of select="$end-tag-start"/>
        <xsl:call-template name="element-name">
          <xsl:with-param name="text" select="name()"/>
        </xsl:call-template>
        <xsl:value-of select="$end-tag-end"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$empty-tag-end"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="process-namespace-node">
    <xsl:param name="element"/>
    <xsl:param name="depth"/>
    <xsl:variable name="declaredAbove">
      <xsl:call-template name="isDeclaredAbove">
        <xsl:with-param name="depth" select="$depth - 1"/>
        <xsl:with-param name="element" select="$element/.."/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="is-used-on-this-element" select="($element    | $element/@*) [namespace-uri() = current()]"/>
    <xsl:variable name="is-used-on-a-descendant" select="($element//* | $element//@*)[namespace-uri() = current()]"/>          
    <xsl:variable name="is-unused" select="not($is-used-on-this-element) and                                            not($is-used-on-a-descendant)"/>
    <xsl:variable name="exclude-ns" select="($is-unused and $exclude-unused-prefixes) or                                             (. = $namespaces-to-exclude)"/>

    <xsl:variable name="force-include" select="$is-used-on-this-element and (. = $namespaces-to-exclude)"/>

    <xsl:if test="(name() != 'xml') and ($force-include or (not($exclude-ns) and not(string($declaredAbove))))">
      <xsl:value-of select="$space"/>
      <xsl:value-of select="$ns-decl"/>
      <xsl:if test="name()">
        <xsl:value-of select="$colon"/>
        <xsl:call-template name="ns-prefix">
          <xsl:with-param name="text" select="name()"/>
        </xsl:call-template>
      </xsl:if>
      <xsl:value-of select="$equals"/>
      <xsl:value-of select="$attribute-delimiter"/>
      <xsl:call-template name="ns-uri">
        <xsl:with-param name="text" select="string(.)"/>
      </xsl:call-template>
      <xsl:value-of select="$attribute-delimiter"/>
    </xsl:if>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="isDeclaredAbove">
    <xsl:param name="element"/>
    <xsl:param name="depth"/>
    <xsl:if test="$depth &gt; 0">
      <xsl:choose>
        <xsl:when test="$element/namespace::*[name(.)=name(current()) and .=current()]">1</xsl:when>
        <xsl:when test="$element/namespace::*[name(.)=name(current())]"/>
        <xsl:otherwise>
          <xsl:call-template name="isDeclaredAbove">
            <xsl:with-param name="depth" select="$depth - 1"/>
            <xsl:with-param name="element" select="$element/.."/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="@*" mode="xml-to-string" name="serialize-attribute">
    <xsl:param name="att-value" select="string(.)"/>
    <xsl:value-of select="$space"/>
    <xsl:call-template name="attribute-name">
      <xsl:with-param name="text" select="name()"/>
    </xsl:call-template>
    <xsl:value-of select="$equals"/>
    <xsl:value-of select="$attribute-delimiter"/>
    <xsl:call-template name="attribute-value">
      <xsl:with-param name="text" select="$att-value"/>
    </xsl:call-template>
    <xsl:value-of select="$attribute-delimiter"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="comment()" mode="xml-to-string">
    <xsl:value-of select="$comment-start"/>
    <xsl:call-template name="comment-text">
      <xsl:with-param name="text" select="string(.)"/>
    </xsl:call-template>
    <xsl:value-of select="$comment-end"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="processing-instruction()" mode="xml-to-string">
    <xsl:value-of select="$pi-start"/>
    <xsl:call-template name="pi-target">
      <xsl:with-param name="text" select="name()"/>
    </xsl:call-template>
    <xsl:value-of select="$space"/>
    <xsl:call-template name="pi-text">
      <xsl:with-param name="text" select="string(.)"/>
    </xsl:call-template>
    <xsl:value-of select="$pi-end"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="text()" mode="xml-to-string">
    <xsl:call-template name="text-content">
      <xsl:with-param name="text" select="string(.)"/>
    </xsl:call-template>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="element-name">
    <xsl:param name="text"/>
    <xsl:value-of select="$text"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="attribute-name">
    <xsl:param name="text"/>
    <xsl:value-of select="$text"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="attribute-value">
    <xsl:param name="text"/>
    <xsl:variable name="escaped-markup">
      <xsl:call-template name="escape-markup-characters">
        <xsl:with-param name="text" select="$text"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$attribute-delimiter = &quot;'&quot;">
        <xsl:call-template name="replace-string">
          <xsl:with-param name="text" select="$escaped-markup"/>
          <xsl:with-param name="replace" select="&quot;'&quot;"/>
          <xsl:with-param name="with" select="'&amp;apos;'"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="$attribute-delimiter = '&quot;'">
        <xsl:call-template name="replace-string">
          <xsl:with-param name="text" select="$escaped-markup"/>
          <xsl:with-param name="replace" select="'&quot;'"/>
          <xsl:with-param name="with" select="'&amp;quot;'"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="replace-string">
          <xsl:with-param name="text" select="$escaped-markup"/>
          <xsl:with-param name="replace" select="$attribute-delimiter"/>
          <xsl:with-param name="with" select="''"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="ns-prefix">
    <xsl:param name="text"/>
    <xsl:value-of select="$text"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="ns-uri">
    <xsl:param name="text"/>
    <xsl:call-template name="attribute-value">
      <xsl:with-param name="text" select="$text"/>
    </xsl:call-template>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="text-content">
    <xsl:param name="text"/>
    <xsl:call-template name="escape-markup-characters">
      <xsl:with-param name="text" select="$text"/>
    </xsl:call-template>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pi-target">
    <xsl:param name="text"/>
    <xsl:value-of select="$text"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pi-text">
    <xsl:param name="text"/>
    <xsl:value-of select="$text"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="comment-text">
    <xsl:param name="text"/>
    <xsl:value-of select="$text"/>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="escape-markup-characters">
    <xsl:param name="text"/>
    <xsl:variable name="ampEscaped">
      <xsl:call-template name="replace-string">
        <xsl:with-param name="text" select="$text"/>
        <xsl:with-param name="replace" select="'&amp;'"/>
        <xsl:with-param name="with" select="'&amp;amp;'"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="ltEscaped">
      <xsl:call-template name="replace-string">
        <xsl:with-param name="text" select="$ampEscaped"/>
        <xsl:with-param name="replace" select="'&lt;'"/>
        <xsl:with-param name="with" select="'&amp;lt;'"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:call-template name="replace-string">
      <xsl:with-param name="text" select="$ltEscaped"/>
      <xsl:with-param name="replace" select="']]&gt;'"/>
      <xsl:with-param name="with" select="']]&amp;gt;'"/>
    </xsl:call-template>
  </xsl:template>
<xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="replace-string">
    <xsl:param name="text"/>
    <xsl:param name="replace"/>
    <xsl:param name="with"/>
    <xsl:variable name="stringText" select="string($text)"/>
    <xsl:choose>
      <xsl:when test="contains($stringText,$replace)">
        <xsl:value-of select="substring-before($stringText,$replace)"/>
        <xsl:value-of select="$with"/>
        <xsl:call-template name="replace-string">
          <xsl:with-param name="text" select="substring-after($stringText,$replace)"/>
          <xsl:with-param name="replace" select="$replace"/>
          <xsl:with-param name="with" select="$with"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$stringText"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xslt:stylesheet>
